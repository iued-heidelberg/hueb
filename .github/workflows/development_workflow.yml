name: Tests & Staging Deployment

on:
  push:
  pull_request:

jobs:
  black:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: psf/black@stable

  flake8:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt
      - name: Setup flake8 annotations
        uses: rbialon/flake8-annotations@v1
      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  Tests:
    runs-on: ubuntu-20.04
    services:
      db:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        options: --mount type=tmpfs,destination=/var/lib/postgresql/data --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install Dependencies
        run: |
          python -V
          python -m pip install --upgrade pip
          python -m pip install -r src/requirements.txt
      - name: Collect static files
        run: |
          cd src
          ./manage.py collectstatic
        env: # Or as an environment variable
          ENV: GITHUB_WORKFLOW
      - name: Run Tests
        run: |
          cd src
          pytest -v
        env: # Or as an environment variable
          ENV: GITHUB_WORKFLOW

  Application_Container_build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}
      - name: Get short SHA for tag
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PAT }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          build-args: git_sha=${{ steps.vars.outputs.sha_short }}
          push: true
          tags: |
            ghcr.io/bockstaller/hueb_app:${{ steps.vars.outputs.sha_short }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Build and push as staging-latest
        id: docker_push
        if: ${{ github.ref == 'refs/heads/develop' && github.event_name == 'push' }}
        uses: docker/build-push-action@v2
        with:
          build-args: git_sha=${{ steps.vars.outputs.sha_short }}
          push: true
          tags: |
            ghcr.io/bockstaller/hueb_app:staging-latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  Postgres_Container_build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}
      - name: Get short SHA for tag
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PAT }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./deployment/docker/postgres/.
          file: ./deployment/docker/postgres/Dockerfile
          tags: |
            ghcr.io/bockstaller/hueb_db:${{ steps.vars.outputs.sha_short }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Build and push
        id: docker_push
        if: ${{ github.ref == 'refs/heads/develop' && github.event_name == 'push' }}
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./deployment/docker/postgres/.
          file: ./deployment/docker/postgres/Dockerfile
          tags: |
            ghcr.io/bockstaller/hueb_db:staging-latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  StagingDeployment:
    if: ${{ github.ref == 'refs/heads/develop' && github.event_name == 'push' }}
    needs:
      [
        Application_Container_build,
        Postgres_Container_build,
        Tests,
        flake8,
        black,
      ]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Get short SHA for tag
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)" && \
          echo "::set-output name=sha::$(git rev-parse HEAD)"
      - uses: bockstaller/ansible-playbook-docker-action@master
        with:
          playbookName: "./deployment/ansible/provision.yml"
          inventoryFile: "./deployment/ansible/inventory/staging.ini"
          rolesFile: "./deployment/ansible/requirements.yml"
          collectionsFile: "./deployment/ansible/requirements.yml"
          rolesPath: "/github/home/.ansible/roles"
          keyFile: "./deployment/ansible/inventory/staging-key"
          keyFileVaultPass: ${{ secrets.STAGING_KEYFILE_VAULT_PASS }}
          extraFile: "./deployment/ansible/group_vars/webserver"
          extraVars: "-e git_sha=${{ steps.vars.outputs.sha_short }} -e tag=${{ steps.vars.outputs.sha_short }} -e env=staging -e url=${{ secrets.STAGING_URL }} -e github_registry_pat=${{ secrets.PAT }} -e honeycomb_api_key=${{ secrets.HONEYCOMB_API }} -e sentry_api_key=${{ secrets.SENTRY_API }} -e django_secret_key=${{ secrets.STAGING_DJANGO_SECRET }} -e db_name=${{ secrets.STAGING_DB_NAME }} -e db_user=${{ secrets.STAGING_DB_USER }} -e db_password=${{ secrets.STAGING_DB_PASSWORD }} -e db_port=${{ secrets.STAGING_DB_PORT }} -e host_db_port=${{ secrets.STAGING_HOST_DB_PORT }} -e project_dir=/github/workspace/"
          verbosity: "vv"

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_RELEASE_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: staging
          version: hueb20@${{ steps.vars.outputs.sha_short }}
      - name: Honeycomb Honeymarker
        uses: naiduarvind/gha-honeymarker@v1.0.1
        with:
          apikey: ${{ secrets.HONEYCOMB_API }}
          dataset: hueb_staging
          type: Release Staging
          message: "Release hueb20@${{ steps.vars.outputs.sha_short }}"
